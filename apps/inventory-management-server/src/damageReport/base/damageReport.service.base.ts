/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DamageReport as PrismaDamageReport,
  InventoryItem as PrismaInventoryItem,
} from "@prisma/client";

export class DamageReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DamageReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.damageReport.count(args);
  }

  async damageReports<T extends Prisma.DamageReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DamageReportFindManyArgs>
  ): Promise<PrismaDamageReport[]> {
    return this.prisma.damageReport.findMany<Prisma.DamageReportFindManyArgs>(
      args
    );
  }
  async damageReport<T extends Prisma.DamageReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DamageReportFindUniqueArgs>
  ): Promise<PrismaDamageReport | null> {
    return this.prisma.damageReport.findUnique(args);
  }
  async createDamageReport<T extends Prisma.DamageReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DamageReportCreateArgs>
  ): Promise<PrismaDamageReport> {
    return this.prisma.damageReport.create<T>(args);
  }
  async updateDamageReport<T extends Prisma.DamageReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DamageReportUpdateArgs>
  ): Promise<PrismaDamageReport> {
    return this.prisma.damageReport.update<T>(args);
  }
  async deleteDamageReport<T extends Prisma.DamageReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DamageReportDeleteArgs>
  ): Promise<PrismaDamageReport> {
    return this.prisma.damageReport.delete(args);
  }

  async getInventoryItem(
    parentId: string
  ): Promise<PrismaInventoryItem | null> {
    return this.prisma.damageReport
      .findUnique({
        where: { id: parentId },
      })
      .inventoryItem();
  }
}
