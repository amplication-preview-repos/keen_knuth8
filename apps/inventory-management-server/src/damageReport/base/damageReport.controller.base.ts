/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DamageReportService } from "../damageReport.service";
import { DamageReportCreateInput } from "./DamageReportCreateInput";
import { DamageReport } from "./DamageReport";
import { DamageReportFindManyArgs } from "./DamageReportFindManyArgs";
import { DamageReportWhereUniqueInput } from "./DamageReportWhereUniqueInput";
import { DamageReportUpdateInput } from "./DamageReportUpdateInput";

export class DamageReportControllerBase {
  constructor(protected readonly service: DamageReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DamageReport })
  async createDamageReport(
    @common.Body() data: DamageReportCreateInput
  ): Promise<DamageReport> {
    return await this.service.createDamageReport({
      data: {
        ...data,

        inventoryItem: data.inventoryItem
          ? {
              connect: data.inventoryItem,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DamageReport] })
  @ApiNestedQuery(DamageReportFindManyArgs)
  async damageReports(@common.Req() request: Request): Promise<DamageReport[]> {
    const args = plainToClass(DamageReportFindManyArgs, request.query);
    return this.service.damageReports({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DamageReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async damageReport(
    @common.Param() params: DamageReportWhereUniqueInput
  ): Promise<DamageReport | null> {
    const result = await this.service.damageReport({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DamageReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDamageReport(
    @common.Param() params: DamageReportWhereUniqueInput,
    @common.Body() data: DamageReportUpdateInput
  ): Promise<DamageReport | null> {
    try {
      return await this.service.updateDamageReport({
        where: params,
        data: {
          ...data,

          inventoryItem: data.inventoryItem
            ? {
                connect: data.inventoryItem,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          inventoryItem: {
            select: {
              id: true,
            },
          },

          quantity: true,
          reportedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DamageReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDamageReport(
    @common.Param() params: DamageReportWhereUniqueInput
  ): Promise<DamageReport | null> {
    try {
      return await this.service.deleteDamageReport({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          inventoryItem: {
            select: {
              id: true,
            },
          },

          quantity: true,
          reportedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
