/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DamageReport } from "./DamageReport";
import { DamageReportCountArgs } from "./DamageReportCountArgs";
import { DamageReportFindManyArgs } from "./DamageReportFindManyArgs";
import { DamageReportFindUniqueArgs } from "./DamageReportFindUniqueArgs";
import { CreateDamageReportArgs } from "./CreateDamageReportArgs";
import { UpdateDamageReportArgs } from "./UpdateDamageReportArgs";
import { DeleteDamageReportArgs } from "./DeleteDamageReportArgs";
import { InventoryItem } from "../../inventoryItem/base/InventoryItem";
import { DamageReportService } from "../damageReport.service";
@graphql.Resolver(() => DamageReport)
export class DamageReportResolverBase {
  constructor(protected readonly service: DamageReportService) {}

  async _damageReportsMeta(
    @graphql.Args() args: DamageReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DamageReport])
  async damageReports(
    @graphql.Args() args: DamageReportFindManyArgs
  ): Promise<DamageReport[]> {
    return this.service.damageReports(args);
  }

  @graphql.Query(() => DamageReport, { nullable: true })
  async damageReport(
    @graphql.Args() args: DamageReportFindUniqueArgs
  ): Promise<DamageReport | null> {
    const result = await this.service.damageReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DamageReport)
  async createDamageReport(
    @graphql.Args() args: CreateDamageReportArgs
  ): Promise<DamageReport> {
    return await this.service.createDamageReport({
      ...args,
      data: {
        ...args.data,

        inventoryItem: args.data.inventoryItem
          ? {
              connect: args.data.inventoryItem,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DamageReport)
  async updateDamageReport(
    @graphql.Args() args: UpdateDamageReportArgs
  ): Promise<DamageReport | null> {
    try {
      return await this.service.updateDamageReport({
        ...args,
        data: {
          ...args.data,

          inventoryItem: args.data.inventoryItem
            ? {
                connect: args.data.inventoryItem,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DamageReport)
  async deleteDamageReport(
    @graphql.Args() args: DeleteDamageReportArgs
  ): Promise<DamageReport | null> {
    try {
      return await this.service.deleteDamageReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => InventoryItem, {
    nullable: true,
    name: "inventoryItem",
  })
  async getInventoryItem(
    @graphql.Parent() parent: DamageReport
  ): Promise<InventoryItem | null> {
    const result = await this.service.getInventoryItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
