/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InventoryItemService } from "../inventoryItem.service";
import { InventoryItemCreateInput } from "./InventoryItemCreateInput";
import { InventoryItem } from "./InventoryItem";
import { InventoryItemFindManyArgs } from "./InventoryItemFindManyArgs";
import { InventoryItemWhereUniqueInput } from "./InventoryItemWhereUniqueInput";
import { InventoryItemUpdateInput } from "./InventoryItemUpdateInput";
import { DamageReportFindManyArgs } from "../../damageReport/base/DamageReportFindManyArgs";
import { DamageReport } from "../../damageReport/base/DamageReport";
import { DamageReportWhereUniqueInput } from "../../damageReport/base/DamageReportWhereUniqueInput";
import { ExpiryReportFindManyArgs } from "../../expiryReport/base/ExpiryReportFindManyArgs";
import { ExpiryReport } from "../../expiryReport/base/ExpiryReport";
import { ExpiryReportWhereUniqueInput } from "../../expiryReport/base/ExpiryReportWhereUniqueInput";

export class InventoryItemControllerBase {
  constructor(protected readonly service: InventoryItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InventoryItem })
  async createInventoryItem(
    @common.Body() data: InventoryItemCreateInput
  ): Promise<InventoryItem> {
    return await this.service.createInventoryItem({
      data: data,
      select: {
        createdAt: true,
        expiryDate: true,
        id: true,
        name: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InventoryItem] })
  @ApiNestedQuery(InventoryItemFindManyArgs)
  async inventoryItems(
    @common.Req() request: Request
  ): Promise<InventoryItem[]> {
    const args = plainToClass(InventoryItemFindManyArgs, request.query);
    return this.service.inventoryItems({
      ...args,
      select: {
        createdAt: true,
        expiryDate: true,
        id: true,
        name: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InventoryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inventoryItem(
    @common.Param() params: InventoryItemWhereUniqueInput
  ): Promise<InventoryItem | null> {
    const result = await this.service.inventoryItem({
      where: params,
      select: {
        createdAt: true,
        expiryDate: true,
        id: true,
        name: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InventoryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInventoryItem(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() data: InventoryItemUpdateInput
  ): Promise<InventoryItem | null> {
    try {
      return await this.service.updateInventoryItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          expiryDate: true,
          id: true,
          name: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InventoryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInventoryItem(
    @common.Param() params: InventoryItemWhereUniqueInput
  ): Promise<InventoryItem | null> {
    try {
      return await this.service.deleteInventoryItem({
        where: params,
        select: {
          createdAt: true,
          expiryDate: true,
          id: true,
          name: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/damageReports")
  @ApiNestedQuery(DamageReportFindManyArgs)
  async findDamageReports(
    @common.Req() request: Request,
    @common.Param() params: InventoryItemWhereUniqueInput
  ): Promise<DamageReport[]> {
    const query = plainToClass(DamageReportFindManyArgs, request.query);
    const results = await this.service.findDamageReports(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/damageReports")
  async connectDamageReports(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() body: DamageReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      damageReports: {
        connect: body,
      },
    };
    await this.service.updateInventoryItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/damageReports")
  async updateDamageReports(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() body: DamageReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      damageReports: {
        set: body,
      },
    };
    await this.service.updateInventoryItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/damageReports")
  async disconnectDamageReports(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() body: DamageReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      damageReports: {
        disconnect: body,
      },
    };
    await this.service.updateInventoryItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/expiryReports")
  @ApiNestedQuery(ExpiryReportFindManyArgs)
  async findExpiryReports(
    @common.Req() request: Request,
    @common.Param() params: InventoryItemWhereUniqueInput
  ): Promise<ExpiryReport[]> {
    const query = plainToClass(ExpiryReportFindManyArgs, request.query);
    const results = await this.service.findExpiryReports(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expiryReports")
  async connectExpiryReports(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() body: ExpiryReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expiryReports: {
        connect: body,
      },
    };
    await this.service.updateInventoryItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expiryReports")
  async updateExpiryReports(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() body: ExpiryReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expiryReports: {
        set: body,
      },
    };
    await this.service.updateInventoryItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expiryReports")
  async disconnectExpiryReports(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() body: ExpiryReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expiryReports: {
        disconnect: body,
      },
    };
    await this.service.updateInventoryItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
