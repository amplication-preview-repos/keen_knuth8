/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExpiryReportService } from "../expiryReport.service";
import { ExpiryReportCreateInput } from "./ExpiryReportCreateInput";
import { ExpiryReport } from "./ExpiryReport";
import { ExpiryReportFindManyArgs } from "./ExpiryReportFindManyArgs";
import { ExpiryReportWhereUniqueInput } from "./ExpiryReportWhereUniqueInput";
import { ExpiryReportUpdateInput } from "./ExpiryReportUpdateInput";

export class ExpiryReportControllerBase {
  constructor(protected readonly service: ExpiryReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExpiryReport })
  async createExpiryReport(
    @common.Body() data: ExpiryReportCreateInput
  ): Promise<ExpiryReport> {
    return await this.service.createExpiryReport({
      data: {
        ...data,

        inventoryItem: data.inventoryItem
          ? {
              connect: data.inventoryItem,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExpiryReport] })
  @ApiNestedQuery(ExpiryReportFindManyArgs)
  async expiryReports(@common.Req() request: Request): Promise<ExpiryReport[]> {
    const args = plainToClass(ExpiryReportFindManyArgs, request.query);
    return this.service.expiryReports({
      ...args,
      select: {
        createdAt: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExpiryReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async expiryReport(
    @common.Param() params: ExpiryReportWhereUniqueInput
  ): Promise<ExpiryReport | null> {
    const result = await this.service.expiryReport({
      where: params,
      select: {
        createdAt: true,
        id: true,

        inventoryItem: {
          select: {
            id: true,
          },
        },

        quantity: true,
        reportedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExpiryReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExpiryReport(
    @common.Param() params: ExpiryReportWhereUniqueInput,
    @common.Body() data: ExpiryReportUpdateInput
  ): Promise<ExpiryReport | null> {
    try {
      return await this.service.updateExpiryReport({
        where: params,
        data: {
          ...data,

          inventoryItem: data.inventoryItem
            ? {
                connect: data.inventoryItem,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          inventoryItem: {
            select: {
              id: true,
            },
          },

          quantity: true,
          reportedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExpiryReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExpiryReport(
    @common.Param() params: ExpiryReportWhereUniqueInput
  ): Promise<ExpiryReport | null> {
    try {
      return await this.service.deleteExpiryReport({
        where: params,
        select: {
          createdAt: true,
          id: true,

          inventoryItem: {
            select: {
              id: true,
            },
          },

          quantity: true,
          reportedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
