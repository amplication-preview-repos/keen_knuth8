/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExpiryReport } from "./ExpiryReport";
import { ExpiryReportCountArgs } from "./ExpiryReportCountArgs";
import { ExpiryReportFindManyArgs } from "./ExpiryReportFindManyArgs";
import { ExpiryReportFindUniqueArgs } from "./ExpiryReportFindUniqueArgs";
import { CreateExpiryReportArgs } from "./CreateExpiryReportArgs";
import { UpdateExpiryReportArgs } from "./UpdateExpiryReportArgs";
import { DeleteExpiryReportArgs } from "./DeleteExpiryReportArgs";
import { InventoryItem } from "../../inventoryItem/base/InventoryItem";
import { ExpiryReportService } from "../expiryReport.service";
@graphql.Resolver(() => ExpiryReport)
export class ExpiryReportResolverBase {
  constructor(protected readonly service: ExpiryReportService) {}

  async _expiryReportsMeta(
    @graphql.Args() args: ExpiryReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExpiryReport])
  async expiryReports(
    @graphql.Args() args: ExpiryReportFindManyArgs
  ): Promise<ExpiryReport[]> {
    return this.service.expiryReports(args);
  }

  @graphql.Query(() => ExpiryReport, { nullable: true })
  async expiryReport(
    @graphql.Args() args: ExpiryReportFindUniqueArgs
  ): Promise<ExpiryReport | null> {
    const result = await this.service.expiryReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExpiryReport)
  async createExpiryReport(
    @graphql.Args() args: CreateExpiryReportArgs
  ): Promise<ExpiryReport> {
    return await this.service.createExpiryReport({
      ...args,
      data: {
        ...args.data,

        inventoryItem: args.data.inventoryItem
          ? {
              connect: args.data.inventoryItem,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExpiryReport)
  async updateExpiryReport(
    @graphql.Args() args: UpdateExpiryReportArgs
  ): Promise<ExpiryReport | null> {
    try {
      return await this.service.updateExpiryReport({
        ...args,
        data: {
          ...args.data,

          inventoryItem: args.data.inventoryItem
            ? {
                connect: args.data.inventoryItem,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpiryReport)
  async deleteExpiryReport(
    @graphql.Args() args: DeleteExpiryReportArgs
  ): Promise<ExpiryReport | null> {
    try {
      return await this.service.deleteExpiryReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => InventoryItem, {
    nullable: true,
    name: "inventoryItem",
  })
  async getInventoryItem(
    @graphql.Parent() parent: ExpiryReport
  ): Promise<InventoryItem | null> {
    const result = await this.service.getInventoryItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
