/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ExpiryReport as PrismaExpiryReport,
  InventoryItem as PrismaInventoryItem,
} from "@prisma/client";

export class ExpiryReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExpiryReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.expiryReport.count(args);
  }

  async expiryReports<T extends Prisma.ExpiryReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpiryReportFindManyArgs>
  ): Promise<PrismaExpiryReport[]> {
    return this.prisma.expiryReport.findMany<Prisma.ExpiryReportFindManyArgs>(
      args
    );
  }
  async expiryReport<T extends Prisma.ExpiryReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpiryReportFindUniqueArgs>
  ): Promise<PrismaExpiryReport | null> {
    return this.prisma.expiryReport.findUnique(args);
  }
  async createExpiryReport<T extends Prisma.ExpiryReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpiryReportCreateArgs>
  ): Promise<PrismaExpiryReport> {
    return this.prisma.expiryReport.create<T>(args);
  }
  async updateExpiryReport<T extends Prisma.ExpiryReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpiryReportUpdateArgs>
  ): Promise<PrismaExpiryReport> {
    return this.prisma.expiryReport.update<T>(args);
  }
  async deleteExpiryReport<T extends Prisma.ExpiryReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpiryReportDeleteArgs>
  ): Promise<PrismaExpiryReport> {
    return this.prisma.expiryReport.delete(args);
  }

  async getInventoryItem(
    parentId: string
  ): Promise<PrismaInventoryItem | null> {
    return this.prisma.expiryReport
      .findUnique({
        where: { id: parentId },
      })
      .inventoryItem();
  }
}
